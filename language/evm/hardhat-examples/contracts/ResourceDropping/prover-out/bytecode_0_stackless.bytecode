# move prove -- --dump-bytecode
============ after processor `stackless` ================

[variant baseline]
public intrinsic fun vector::contains<#0>($t0|v: &vector<#0>, $t1|e: &#0): bool;


[variant baseline]
public intrinsic fun vector::index_of<#0>($t0|v: &vector<#0>, $t1|e: &#0): (bool, u64);


[variant baseline]
public intrinsic fun vector::append<#0>($t0|lhs: &mut vector<#0>, $t1|other: vector<#0>);


[variant baseline]
public native fun vector::borrow<#0>($t0|v: &vector<#0>, $t1|i: u64): &#0;


[variant baseline]
public native fun vector::borrow_mut<#0>($t0|v: &mut vector<#0>, $t1|i: u64): &mut #0;


[variant baseline]
public native fun vector::destroy_empty<#0>($t0|v: vector<#0>);


[variant baseline]
public native fun vector::empty<#0>(): vector<#0>;


[variant baseline]
public intrinsic fun vector::insert<#0>($t0|v: &mut vector<#0>, $t1|e: #0, $t2|i: u64);


[variant baseline]
public intrinsic fun vector::is_empty<#0>($t0|v: &vector<#0>): bool;


[variant baseline]
public native fun vector::length<#0>($t0|v: &vector<#0>): u64;


[variant baseline]
public native fun vector::pop_back<#0>($t0|v: &mut vector<#0>): #0;


[variant baseline]
public native fun vector::push_back<#0>($t0|v: &mut vector<#0>, $t1|e: #0);


[variant baseline]
public intrinsic fun vector::remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0;


[variant baseline]
public intrinsic fun vector::reverse<#0>($t0|v: &mut vector<#0>);


[variant baseline]
public fun vector::singleton<#0>($t0|e: #0): vector<#0> {
     var $t1|v: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     var $t4: #0
     var $t5: vector<#0>
  0: $t2 := vector::empty<#0>()
  1: $t1 := $t2
  2: $t3 := borrow_local($t1)
  3: $t4 := move($t0)
  4: vector::push_back<#0>($t3, $t4)
  5: $t5 := move($t1)
  6: return $t5
}


[variant baseline]
public native fun vector::swap<#0>($t0|v: &mut vector<#0>, $t1|i: u64, $t2|j: u64);


[variant baseline]
public intrinsic fun vector::swap_remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0;


[variant baseline]
public native fun U256::add($t0|x: U256::U256, $t1|y: U256::U256): U256::U256;


[variant baseline]
public native fun U256::div($t0|x: U256::U256, $t1|y: U256::U256): U256::U256;


[variant baseline]
public native fun U256::eq($t0|x: U256::U256, $t1|y: U256::U256): bool;


[variant baseline]
public native fun U256::ge($t0|x: U256::U256, $t1|y: U256::U256): bool;


[variant baseline]
public native fun U256::gt($t0|x: U256::U256, $t1|y: U256::U256): bool;


[variant baseline]
public native fun U256::le($t0|x: U256::U256, $t1|y: U256::U256): bool;


[variant baseline]
public native fun U256::lt($t0|x: U256::U256, $t1|y: U256::U256): bool;


[variant baseline]
public fun U256::max(): U256::U256 {
     var $t0: u128
     var $t1: u128
     var $t2: U256::U256
  0: $t0 := 340282366920938463463374607431768211455
  1: $t1 := 340282366920938463463374607431768211455
  2: $t2 := U256::u256_from_words($t0, $t1)
  3: return $t2
}


[variant baseline]
public native fun U256::mod($t0|x: U256::U256, $t1|y: U256::U256): U256::U256;


[variant baseline]
public native fun U256::mul($t0|x: U256::U256, $t1|y: U256::U256): U256::U256;


[variant baseline]
public native fun U256::ne($t0|x: U256::U256, $t1|y: U256::U256): bool;


[variant baseline]
public fun U256::one(): U256::U256 {
     var $t0: u128
     var $t1: u128
     var $t2: U256::U256
  0: $t0 := 0
  1: $t1 := 1
  2: $t2 := U256::u256_from_words($t0, $t1)
  3: return $t2
}


[variant baseline]
public native fun U256::shl($t0|x: U256::U256, $t1|y: u8): U256::U256;


[variant baseline]
public native fun U256::shr($t0|x: U256::U256, $t1|y: u8): U256::U256;


[variant baseline]
public native fun U256::sub($t0|x: U256::U256, $t1|y: U256::U256): U256::U256;


[variant baseline]
public native fun U256::to_address($t0|x: U256::U256): address;


[variant baseline]
public fun U256::u256_from_u128($t0|lo: u128): U256::U256 {
     var $t1: u128
     var $t2: u128
     var $t3: U256::U256
  0: $t1 := 0
  1: $t2 := move($t0)
  2: $t3 := U256::u256_from_words($t1, $t2)
  3: return $t3
}


[variant baseline]
public native fun U256::u256_from_words($t0|hi: u128, $t1|lo: u128): U256::U256;


[variant baseline]
public fun U256::zero(): U256::U256 {
     var $t0: u128
     var $t1: u128
     var $t2: U256::U256
  0: $t0 := 0
  1: $t1 := 0
  2: $t2 := U256::u256_from_words($t0, $t1)
  3: return $t2
}


[variant baseline]
public native fun Evm::concat($t0|s1: vector<u8>, $t1|s2: vector<u8>): vector<u8>;


[variant baseline]
public native fun Evm::abort_with($t0|message: vector<u8>);


[variant baseline]
public native fun Evm::balance($t0|addr: address): U256::U256;


[variant baseline]
public native fun Evm::block_basefee(): U256::U256;


[variant baseline]
public native fun Evm::block_chainid(): U256::U256;


[variant baseline]
public native fun Evm::block_coinbase(): address;


[variant baseline]
public native fun Evm::block_difficulty(): U256::U256;


[variant baseline]
public native fun Evm::block_gaslimit(): U256::U256;


[variant baseline]
public native fun Evm::block_number(): U256::U256;


[variant baseline]
public native fun Evm::block_timestamp(): U256::U256;


[variant baseline]
public native fun Evm::blockhash($t0|block_number: U256::U256): vector<u8>;


[variant baseline]
public fun Evm::bytes4($t0|data: vector<u8>): vector<u8> {
     var $t1|res: vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: vector<u8>
     var $t8: &mut vector<u8>
     var $t9: &vector<u8>
     var $t10: u64
     var $t11: &u8
     var $t12: u8
     var $t13: &mut vector<u8>
     var $t14: &vector<u8>
     var $t15: u64
     var $t16: &u8
     var $t17: u8
     var $t18: &mut vector<u8>
     var $t19: &vector<u8>
     var $t20: u64
     var $t21: &u8
     var $t22: u8
     var $t23: &mut vector<u8>
     var $t24: &vector<u8>
     var $t25: u64
     var $t26: &u8
     var $t27: u8
     var $t28: vector<u8>
  0: $t2 := borrow_local($t0)
  1: $t3 := vector::length<u8>($t2)
  2: $t4 := 4
  3: $t5 := >=($t3, $t4)
  4: if ($t5) goto 5 else goto 7
  5: label L1
  6: goto 10
  7: label L0
  8: $t6 := 0
  9: abort($t6)
 10: label L2
 11: $t7 := vector::empty<u8>()
 12: $t1 := $t7
 13: $t8 := borrow_local($t1)
 14: $t9 := borrow_local($t0)
 15: $t10 := 0
 16: $t11 := vector::borrow<u8>($t9, $t10)
 17: $t12 := read_ref($t11)
 18: vector::push_back<u8>($t8, $t12)
 19: $t13 := borrow_local($t1)
 20: $t14 := borrow_local($t0)
 21: $t15 := 1
 22: $t16 := vector::borrow<u8>($t14, $t15)
 23: $t17 := read_ref($t16)
 24: vector::push_back<u8>($t13, $t17)
 25: $t18 := borrow_local($t1)
 26: $t19 := borrow_local($t0)
 27: $t20 := 2
 28: $t21 := vector::borrow<u8>($t19, $t20)
 29: $t22 := read_ref($t21)
 30: vector::push_back<u8>($t18, $t22)
 31: $t23 := borrow_local($t1)
 32: $t24 := borrow_local($t0)
 33: $t25 := 3
 34: $t26 := vector::borrow<u8>($t24, $t25)
 35: $t27 := read_ref($t26)
 36: vector::push_back<u8>($t23, $t27)
 37: $t28 := move($t1)
 38: return $t28
}


[variant baseline]
public native fun Evm::bytes_xor($t0|v1: vector<u8>, $t1|v2: vector<u8>): vector<u8>;


[variant baseline]
public native fun Evm::emit<#0>($t0|e: #0);


[variant baseline]
public native fun Evm::extcodesize($t0|addr: address): U256::U256;


[variant baseline]
public native fun Evm::gasleft(): U256::U256;


[variant baseline]
public fun Evm::isContract($t0|addr: address): bool {
     var $t1: address
     var $t2: U256::U256
     var $t3: U256::U256
     var $t4: bool
  0: $t1 := move($t0)
  1: $t2 := Evm::extcodesize($t1)
  2: $t3 := U256::zero()
  3: $t4 := U256::gt($t2, $t3)
  4: return $t4
}


[variant baseline]
public native fun Evm::keccak256($t0|data: vector<u8>): vector<u8>;


[variant baseline]
public native fun Evm::msg_data(): vector<u8>;


[variant baseline]
public native fun Evm::msg_sender(): address;


[variant baseline]
public native fun Evm::msg_sig(): vector<u8>;


[variant baseline]
public native fun Evm::msg_value(): U256::U256;


[variant baseline]
public fun Evm::require($t0|cond: bool, $t1|message: vector<u8>) {
     var $t2: bool
     var $t3: bool
     var $t4: vector<u8>
  0: $t2 := move($t0)
  1: $t3 := !($t2)
  2: if ($t3) goto 3 else goto 7
  3: label L1
  4: $t4 := move($t1)
  5: Evm::abort_with($t4)
  6: goto 7
  7: label L0
  8: return ()
}


[variant baseline]
public native fun Evm::self(): address;


[variant baseline]
public fun Evm::sender(): address {
     var $t0: address
  0: $t0 := Evm::msg_sender()
  1: return $t0
}


[variant baseline]
public native fun Evm::sign($t0|addr: address): signer;


[variant baseline]
public native fun Evm::to_string($t0|x: U256::U256): vector<u8>;


[variant baseline]
public fun Evm::tokenURI_with_baseURI($t0|baseURI: vector<u8>, $t1|tokenId: U256::U256): vector<u8> {
     var $t2|tmp#$2: vector<u8>
     var $t3: &vector<u8>
     var $t4: u64
     var $t5: u64
     var $t6: bool
     var $t7: vector<u8>
     var $t8: vector<u8>
     var $t9: U256::U256
     var $t10: vector<u8>
     var $t11: vector<u8>
     var $t12: vector<u8>
  0: $t3 := borrow_local($t0)
  1: $t4 := vector::length<u8>($t3)
  2: $t5 := 0
  3: $t6 := ==($t4, $t5)
  4: if ($t6) goto 5 else goto 9
  5: label L1
  6: $t7 := vector::empty<u8>()
  7: $t2 := $t7
  8: goto 16
  9: label L0
 10: $t8 := move($t0)
 11: $t9 := move($t1)
 12: $t10 := Evm::to_string($t9)
 13: $t11 := Evm::concat($t8, $t10)
 14: $t2 := $t11
 15: goto 16
 16: label L2
 17: $t12 := move($t2)
 18: return $t12
}


[variant baseline]
public native fun Evm::transfer($t0|addr: address, $t1|amount: U256::U256);


[variant baseline]
public native fun Evm::tx_gasprice(): U256::U256;


[variant baseline]
public native fun Evm::tx_origin(): address;


[variant baseline]
public fun Evm::value(): U256::U256 {
     var $t0: U256::U256
  0: $t0 := Evm::msg_value()
  1: return $t0
}


[variant baseline]
public fun SimpleState::remove($t0|addr: address) {
     var $t1: address
     var $t2: SimpleState::DroppedRes
     var $t3: U256::U256
  0: $t1 := move($t0)
  1: $t2 := move_from<SimpleState::DroppedRes>($t1)
  2: $t3 := unpack SimpleState::DroppedRes($t2)
  3: destroy($t3)
  4: return ()
}


[variant baseline]
public fun SimpleState::allocate($t0|val: U256::U256) {
     var $t1|tmp#$1: signer
     var $t2|res: SimpleState::DroppedRes
     var $t3: U256::U256
     var $t4: SimpleState::DroppedRes
     var $t5: address
     var $t6: signer
     var $t7: &signer
     var $t8: SimpleState::DroppedRes
  0: $t3 := move($t0)
  1: $t4 := pack SimpleState::DroppedRes($t3)
  2: $t2 := $t4
  3: $t5 := Evm::sender()
  4: $t6 := Evm::sign($t5)
  5: $t1 := $t6
  6: $t7 := borrow_local($t1)
  7: $t8 := move($t2)
  8: move_to<SimpleState::DroppedRes>($t8, $t7)
  9: return ()
}


[variant baseline]
public fun SimpleState::dropRes(): SimpleState::DroppedRes {
     var $t0: U256::U256
     var $t1: SimpleState::DroppedRes
  0: $t0 := U256::zero()
  1: $t1 := pack SimpleState::DroppedRes($t0)
  2: return $t1
}


[variant baseline]
public fun SimpleState::dropResFromStorage($t0|addr: address): SimpleState::DroppedRes {
     var $t1: address
     var $t2: SimpleState::DroppedRes
  0: $t1 := move($t0)
  1: $t2 := move_from<SimpleState::DroppedRes>($t1)
  2: return $t2
}


[variant baseline]
public fun SimpleState::init_module($t0|val: U256::U256, $t1|addr: address) {
     var $t2|tmp#$2: signer
     var $t3|res: SimpleState::DroppedRes
     var $t4: U256::U256
     var $t5: SimpleState::DroppedRes
     var $t6: address
     var $t7: signer
     var $t8: &signer
     var $t9: SimpleState::DroppedRes
  0: $t4 := move($t0)
  1: $t5 := pack SimpleState::DroppedRes($t4)
  2: $t3 := $t5
  3: $t6 := move($t1)
  4: $t7 := Evm::sign($t6)
  5: $t2 := $t7
  6: $t8 := borrow_local($t2)
  7: $t9 := move($t3)
  8: move_to<SimpleState::DroppedRes>($t9, $t8)
  9: return ()
}


[variant baseline]
public fun SimpleState::read($t0|addr: address): U256::U256 {
     var $t1: address
     var $t2: &SimpleState::DroppedRes
     var $t3: &U256::U256
     var $t4: U256::U256
  0: $t1 := move($t0)
  1: $t2 := borrow_global<SimpleState::DroppedRes>($t1)
  2: $t3 := borrow_field<SimpleState::DroppedRes>.val($t2)
  3: $t4 := read_ref($t3)
  4: return $t4
}


[variant baseline]
public fun SimpleState::set($t0|val: U256::U256, $t1|addr: address) {
     var $t2|s: &mut SimpleState::DroppedRes
     var $t3: address
     var $t4: &mut SimpleState::DroppedRes
     var $t5: U256::U256
     var $t6: &mut SimpleState::DroppedRes
     var $t7: &mut U256::U256
  0: $t3 := move($t1)
  1: $t4 := borrow_global<SimpleState::DroppedRes>($t3)
  2: $t2 := $t4
  3: $t5 := move($t0)
  4: $t6 := move($t2)
  5: $t7 := borrow_field<SimpleState::DroppedRes>.val($t6)
  6: write_ref($t7, $t5)
  7: return ()
}
