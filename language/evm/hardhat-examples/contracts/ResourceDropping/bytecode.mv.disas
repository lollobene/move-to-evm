// Move bytecode v6
module 2.SimpleState {
use 00000000000000000000000000000002::Evm;
use 00000000000000000000000000000002::U256;


struct DroppedRes has key {
	val: U256
}

public allocate(val: U256) {
L0:	res: DroppedRes
B0:
	0: MoveLoc[0](val: U256)
	1: Pack[0](DroppedRes)
	2: StLoc[2](res: DroppedRes)
	3: Call Evm::sender(): address
	4: Call Evm::sign(address): signer
	5: StLoc[1](%#1: signer)
	6: ImmBorrowLoc[1](%#1: signer)
	7: MoveLoc[2](res: DroppedRes)
	8: MoveTo[0](DroppedRes)
	9: Ret
}
public dropRes(): DroppedRes {
B0:
	0: Call U256::zero(): U256
	1: Pack[0](DroppedRes)
	2: Ret
}
public dropResFromStorage(addr: address): DroppedRes {
B0:
	0: MoveLoc[0](addr: address)
	1: MoveFrom[0](DroppedRes)
	2: Ret
}
public init_module(val: U256, addr: address) {
B0:
	0: MoveLoc[0](val: U256)
	1: Pack[0](DroppedRes)
	2: StLoc[3](res: DroppedRes)
	3: MoveLoc[1](addr: address)
	4: Call Evm::sign(address): signer
	5: StLoc[2](%#1: signer)
	6: ImmBorrowLoc[2](%#1: signer)
	7: MoveLoc[3](res: DroppedRes)
	8: MoveTo[0](DroppedRes)
	9: Ret
}
public read(addr: address): U256 {
B0:
	0: MoveLoc[0](addr: address)
	1: ImmBorrowGlobal[0](DroppedRes)
	2: ImmBorrowField[0](DroppedRes.val: U256)
	3: ReadRef
	4: Ret
}
public remove(addr: address) {
B0:
	0: MoveLoc[0](addr: address)
	1: MoveFrom[0](DroppedRes)
	2: Unpack[0](DroppedRes)
	3: Pop
	4: Ret
}
public set(val: U256, addr: address) {
B0:
	0: MoveLoc[1](addr: address)
	1: MutBorrowGlobal[0](DroppedRes)
	2: StLoc[2](s: &mut DroppedRes)
	3: MoveLoc[0](val: U256)
	4: MoveLoc[2](s: &mut DroppedRes)
	5: MutBorrowField[0](DroppedRes.val: U256)
	6: WriteRef
	7: Ret
}
}